(window.webpackJsonp=window.webpackJsonp||[]).push([[14],{295:function(s,t,a){"use strict";a.r(t);var e=a(14),n=Object(e.a)({},(function(){var s=this,t=s._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[t("h1",{attrs:{id:"git-backup"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#git-backup"}},[s._v("#")]),s._v(" GIT Backup")]),s._v(" "),t("p",[s._v("To automate git backup from the cloud to the on-premise server, follow the following steps.\nCreate a bash script that you can run manually to backup git to the hosting server using the following bash commands:")]),s._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[s._v("sudo")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("bash")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<<")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("EOF\n# Run GitLab backup command\nif "),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$GITLAB_DIR")]),s._v('/bin/gitlab-rake gitlab:backup:create; then\n    echo "GitLab backup completed successfully."\n\n    # Delete previous backups, retaining only the latest 2\n    ls -1t /var/opt/gitlab/backups | tail -n +3 | xargs -I {} sudo rm /var/opt/gitlab/backups/{}\n\n    # Remove all previous backups in '),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$BACKUP_DIR")]),s._v('\n    rm -f "'),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$BACKUP_DIR")]),s._v('"/*.tar\n    rm -f "'),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$BACKUP_DIR")]),s._v('"/gitlab-*\n    rm -f "'),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$BACKUP_DIR")]),s._v('"/gitlab.*\n\n    # Copy the backup archive to '),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$BACKUP_DIR")]),s._v(' with timestamp\n    sudo cp /var/opt/gitlab/backups/*.tar "'),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$BACKUP_DIR")]),s._v('/"\n\n    # Adjust permissions for the copied backup files\n    sudo chmod 644 "'),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$BACKUP_DIR")]),s._v('"/*.tar\n\n    # Copy gitlab.rb with timestamp to '),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$BACKUP_DIR")]),s._v('\n    sudo cp /etc/gitlab/gitlab.rb "'),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$BACKUP_DIR")]),s._v("/gitlab.rb_"),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$TIMESTAMP")]),s._v('"\n\n    # Adjust permissions for the copied gitlab.rb file\n    sudo chmod 644 "'),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$BACKUP_DIR")]),s._v('/gitlab.rb_"*\n\n    # Copy gitlab-secrets.json with timestamp to '),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$BACKUP_DIR")]),s._v('\n    sudo cp /etc/gitlab/gitlab-secrets.json "'),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$BACKUP_DIR")]),s._v("/gitlab-secrets.json_"),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$TIMESTAMP")]),s._v('"\n\n    # Adjust permissions for the copied gitlab-secrets.json file\n    sudo chmod 600 "'),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$BACKUP_DIR")]),s._v('/gitlab-secrets."*\n\n    echo "Backup archive and files, along with the latest 2 backups, copied to '),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$BACKUP_DIR")]),s._v('"\nelse\n    echo "GitLab backup failed. Check logs for more details."\nfi\nEOF')]),s._v("\n")])])]),t("p",[s._v("This script will backup the git tar file plus all the necessary configurations required during the restoring process, that is gitlab secrets & gitlab.rb files.")]),s._v(" "),t("h2",{attrs:{id:"backing-git-to-the-local-server"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#backing-git-to-the-local-server"}},[s._v("#")]),s._v(" Backing git to the local server")]),s._v(" "),t("p",[s._v("Generate ssh-key in the destination server using the command: ssh-keygen -t rsa.\nInput the password of your choice or leave it blank and confirm.\nInput the paraphrase of your choice or leave it blank and confirm.\nRun: ssh-copy-id user@gitlab_host\nTest connection: ssh user@gitlab_host\nCreate a script to obtain the backup items from the cloud to the local server:")]),s._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("REMOTE_HOST")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"<git_cloud_server_ip>"')]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("REMOTE_USER")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"git_cloud_server_user"')]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("REMOTE_PASSWORD")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"git_cloud_server_password"')]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("REMOTE_PATH")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"remote/path"')]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("LOCAL_PATH")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"locla/path"')]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Create local directory if it doesn't exist")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("mkdir")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-p")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"'),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$LOCAL_PATH")]),s._v('"')]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Function to get the latest file based on timestamp")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token function-name function"}},[s._v("get_latest_file")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("ssh")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"'),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$REMOTE_USER")]),s._v("@"),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$REMOTE_HOST")]),s._v('"')]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"ls -1t '),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$REMOTE_PATH")]),s._v("/"),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$1")]),s._v(' 2>/dev/null | head -n1"')]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Function to copy the latest file of a given type")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token function-name function"}},[s._v("copy_latest_file")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("latest_file")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token variable"}},[t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$(")]),s._v("get_latest_file "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"'),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$1")]),s._v('"')]),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v(")")])]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-n")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"'),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$latest_file")]),s._v('"')]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("then")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("scp")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"'),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$REMOTE_USER")]),s._v("@"),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$REMOTE_HOST")]),s._v(":"),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$latest_file")]),s._v('"')]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"'),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$LOCAL_PATH")]),s._v('"')]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$?")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-eq")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("then")]),s._v("\n            "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"'),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$1")]),s._v(' file copied successfully!"')]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("else")]),s._v("\n            "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Error copying '),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$1")]),s._v(' file."')]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("fi")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("else")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"No '),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$1")]),s._v(' files found."')]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("fi")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Copy the latest .json file")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v('#copy_latest_file "*.json"*')]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Copy the latest .rb file")]),s._v("\ncopy_latest_file "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"*.rb"')]),s._v("*\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Copy the latest .tar file")]),s._v("\ncopy_latest_file "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"*.tar"')]),s._v("\n")])])]),t("p",[s._v("Next create a cronjob for your script:\nIn the terminal, run: crontab -e\ncrontab file will open.\nspecify the period after which your job should run, e.g for every 3 hours:")]),s._v(" "),t("ul",[t("li",[s._v("*/3 * * * path/to/backup_script")])])])}),[],!1,null,null,null);t.default=n.exports}}]);